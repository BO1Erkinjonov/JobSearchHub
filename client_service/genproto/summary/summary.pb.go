// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: summary/summary.proto

package client

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetAllRequestSummary struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllRequestSummary) Reset()         { *m = GetAllRequestSummary{} }
func (m *GetAllRequestSummary) String() string { return proto.CompactTextString(m) }
func (*GetAllRequestSummary) ProtoMessage()    {}
func (*GetAllRequestSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce0dfd4d157d431, []int{0}
}
func (m *GetAllRequestSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllRequestSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllRequestSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllRequestSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllRequestSummary.Merge(m, src)
}
func (m *GetAllRequestSummary) XXX_Size() int {
	return m.Size()
}
func (m *GetAllRequestSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllRequestSummary.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllRequestSummary proto.InternalMessageInfo

func (m *GetAllRequestSummary) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllRequestSummary) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetAllResponseSummary struct {
	Summary              []*Summary `protobuf:"bytes,1,rep,name=summary,proto3" json:"summary"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetAllResponseSummary) Reset()         { *m = GetAllResponseSummary{} }
func (m *GetAllResponseSummary) String() string { return proto.CompactTextString(m) }
func (*GetAllResponseSummary) ProtoMessage()    {}
func (*GetAllResponseSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce0dfd4d157d431, []int{1}
}
func (m *GetAllResponseSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllResponseSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllResponseSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllResponseSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllResponseSummary.Merge(m, src)
}
func (m *GetAllResponseSummary) XXX_Size() int {
	return m.Size()
}
func (m *GetAllResponseSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllResponseSummary.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllResponseSummary proto.InternalMessageInfo

func (m *GetAllResponseSummary) GetSummary() []*Summary {
	if m != nil {
		return m.Summary
	}
	return nil
}

type GetRequestSummary struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequestSummary) Reset()         { *m = GetRequestSummary{} }
func (m *GetRequestSummary) String() string { return proto.CompactTextString(m) }
func (*GetRequestSummary) ProtoMessage()    {}
func (*GetRequestSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce0dfd4d157d431, []int{2}
}
func (m *GetRequestSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequestSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequestSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequestSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequestSummary.Merge(m, src)
}
func (m *GetRequestSummary) XXX_Size() int {
	return m.Size()
}
func (m *GetRequestSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequestSummary.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequestSummary proto.InternalMessageInfo

func (m *GetRequestSummary) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StatusSummary struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusSummary) Reset()         { *m = StatusSummary{} }
func (m *StatusSummary) String() string { return proto.CompactTextString(m) }
func (*StatusSummary) ProtoMessage()    {}
func (*StatusSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce0dfd4d157d431, []int{3}
}
func (m *StatusSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusSummary.Merge(m, src)
}
func (m *StatusSummary) XXX_Size() int {
	return m.Size()
}
func (m *StatusSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusSummary.DiscardUnknown(m)
}

var xxx_messageInfo_StatusSummary proto.InternalMessageInfo

func (m *StatusSummary) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type Summary struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	OwnerId              string   `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id"`
	Skills               string   `protobuf:"bytes,3,opt,name=skills,proto3" json:"skills"`
	Bio                  string   `protobuf:"bytes,4,opt,name=bio,proto3" json:"bio"`
	Languages            string   `protobuf:"bytes,5,opt,name=languages,proto3" json:"languages"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Summary) Reset()         { *m = Summary{} }
func (m *Summary) String() string { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()    {}
func (*Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce0dfd4d157d431, []int{4}
}
func (m *Summary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Summary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary.Merge(m, src)
}
func (m *Summary) XXX_Size() int {
	return m.Size()
}
func (m *Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary.DiscardUnknown(m)
}

var xxx_messageInfo_Summary proto.InternalMessageInfo

func (m *Summary) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Summary) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Summary) GetSkills() string {
	if m != nil {
		return m.Skills
	}
	return ""
}

func (m *Summary) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *Summary) GetLanguages() string {
	if m != nil {
		return m.Languages
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAllRequestSummary)(nil), "client.GetAllRequestSummary")
	proto.RegisterType((*GetAllResponseSummary)(nil), "client.GetAllResponseSummary")
	proto.RegisterType((*GetRequestSummary)(nil), "client.GetRequestSummary")
	proto.RegisterType((*StatusSummary)(nil), "client.StatusSummary")
	proto.RegisterType((*Summary)(nil), "client.Summary")
}

func init() { proto.RegisterFile("summary/summary.proto", fileDescriptor_3ce0dfd4d157d431) }

var fileDescriptor_3ce0dfd4d157d431 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x4e, 0xea, 0x40,
	0x14, 0xbe, 0x2d, 0xff, 0xe7, 0xa6, 0x5c, 0xee, 0x04, 0x6e, 0x0a, 0xe1, 0x36, 0xa4, 0x2e, 0xc4,
	0x0d, 0x06, 0xdc, 0xba, 0x10, 0x34, 0x21, 0x24, 0xae, 0x4a, 0x5c, 0x9b, 0x42, 0x4f, 0xc8, 0xc4,
	0xa1, 0xad, 0x9d, 0xa9, 0x86, 0xc4, 0x07, 0xf1, 0x85, 0x4c, 0x5c, 0xfa, 0x08, 0x06, 0x5f, 0xc4,
	0x38, 0xed, 0x00, 0x96, 0x68, 0xe2, 0xaa, 0xe7, 0x7c, 0xe7, 0x3b, 0x3f, 0xfd, 0xbe, 0x81, 0x06,
	0x8f, 0x97, 0x4b, 0x37, 0x5a, 0x1d, 0xa7, 0xdf, 0x5e, 0x18, 0x05, 0x22, 0x20, 0xc5, 0x39, 0xa3,
	0xe8, 0x0b, 0xfb, 0x0c, 0xea, 0x63, 0x14, 0x43, 0xc6, 0x1c, 0xbc, 0x8d, 0x91, 0x8b, 0x69, 0xc2,
	0x22, 0x04, 0xf2, 0xa1, 0xbb, 0x40, 0x53, 0xeb, 0x68, 0xdd, 0x82, 0x23, 0x63, 0x52, 0x87, 0x02,
	0xa3, 0x4b, 0x2a, 0x4c, 0x5d, 0x82, 0x49, 0x62, 0x8f, 0xa0, 0xa1, 0x26, 0xf0, 0x30, 0xf0, 0x39,
	0xaa, 0x11, 0x47, 0x50, 0x4a, 0x77, 0x9a, 0x5a, 0x27, 0xd7, 0xfd, 0x3d, 0xf8, 0xd3, 0x4b, 0x96,
	0xf6, 0x52, 0x86, 0xa3, 0xea, 0xf6, 0x01, 0xfc, 0x1d, 0xa3, 0xc8, 0x9c, 0x50, 0x05, 0x9d, 0x7a,
	0xe9, 0x01, 0x3a, 0xf5, 0xec, 0x43, 0x30, 0xa6, 0xc2, 0x15, 0x31, 0x57, 0x84, 0x7f, 0x50, 0xe4,
	0x12, 0x90, 0xa4, 0xb2, 0x93, 0x66, 0xf6, 0x03, 0x94, 0xbe, 0x98, 0x41, 0x9a, 0x50, 0x0e, 0xee,
	0x7d, 0x8c, 0xae, 0xa9, 0x27, 0xff, 0xa2, 0xe2, 0x94, 0x64, 0x3e, 0xf1, 0xe4, 0xb4, 0x1b, 0xca,
	0x18, 0x37, 0x73, 0xb2, 0x90, 0x66, 0xa4, 0x06, 0xb9, 0x19, 0x0d, 0xcc, 0xbc, 0x04, 0x3f, 0x42,
	0xd2, 0x86, 0x0a, 0x73, 0xfd, 0x45, 0xec, 0x2e, 0x90, 0x9b, 0x05, 0x89, 0x6f, 0x81, 0xc1, 0x93,
	0x0e, 0xd5, 0x74, 0xfd, 0x14, 0xa3, 0x3b, 0x3a, 0x47, 0xd2, 0x07, 0xe3, 0x3c, 0x42, 0x57, 0x6c,
	0xa4, 0xc9, 0x2a, 0xd1, 0xca, 0x02, 0xe4, 0x14, 0xaa, 0x63, 0x54, 0x52, 0x8c, 0x56, 0x13, 0x8f,
	0x34, 0x15, 0x65, 0x4f, 0xa9, 0xfd, 0xee, 0x4b, 0x30, 0x12, 0x4f, 0x14, 0xd0, 0xde, 0x69, 0xde,
	0x33, 0xbb, 0xf5, 0x3f, 0x5b, 0xfd, 0x6c, 0x64, 0x1f, 0x8c, 0xab, 0xd0, 0xfb, 0xd1, 0xf9, 0x43,
	0x30, 0x2e, 0x90, 0xe1, 0xb6, 0xe5, 0x9b, 0xeb, 0x1b, 0x9b, 0xe6, 0x5d, 0x77, 0x47, 0xb5, 0xe7,
	0xb5, 0xa5, 0xbd, 0xac, 0x2d, 0xed, 0x75, 0x6d, 0x69, 0x8f, 0x6f, 0xd6, 0xaf, 0x59, 0x51, 0x3e,
	0xdd, 0x93, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xd2, 0x72, 0xfd, 0xd3, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SummaryServiceClient is the client API for SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SummaryServiceClient interface {
	CreateSummary(ctx context.Context, in *Summary, opts ...grpc.CallOption) (*Summary, error)
	GetSummaryById(ctx context.Context, in *GetRequestSummary, opts ...grpc.CallOption) (*Summary, error)
	GetAllSummary(ctx context.Context, in *GetAllRequestSummary, opts ...grpc.CallOption) (*GetAllResponseSummary, error)
	UpdateSummary(ctx context.Context, in *Summary, opts ...grpc.CallOption) (*Summary, error)
	DeleteSummary(ctx context.Context, in *GetRequestSummary, opts ...grpc.CallOption) (*StatusSummary, error)
}

type summaryServiceClient struct {
	cc *grpc.ClientConn
}

func NewSummaryServiceClient(cc *grpc.ClientConn) SummaryServiceClient {
	return &summaryServiceClient{cc}
}

func (c *summaryServiceClient) CreateSummary(ctx context.Context, in *Summary, opts ...grpc.CallOption) (*Summary, error) {
	out := new(Summary)
	err := c.cc.Invoke(ctx, "/client.SummaryService/CreateSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) GetSummaryById(ctx context.Context, in *GetRequestSummary, opts ...grpc.CallOption) (*Summary, error) {
	out := new(Summary)
	err := c.cc.Invoke(ctx, "/client.SummaryService/GetSummaryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) GetAllSummary(ctx context.Context, in *GetAllRequestSummary, opts ...grpc.CallOption) (*GetAllResponseSummary, error) {
	out := new(GetAllResponseSummary)
	err := c.cc.Invoke(ctx, "/client.SummaryService/GetAllSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) UpdateSummary(ctx context.Context, in *Summary, opts ...grpc.CallOption) (*Summary, error) {
	out := new(Summary)
	err := c.cc.Invoke(ctx, "/client.SummaryService/UpdateSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) DeleteSummary(ctx context.Context, in *GetRequestSummary, opts ...grpc.CallOption) (*StatusSummary, error) {
	out := new(StatusSummary)
	err := c.cc.Invoke(ctx, "/client.SummaryService/DeleteSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummaryServiceServer is the server API for SummaryService service.
type SummaryServiceServer interface {
	CreateSummary(context.Context, *Summary) (*Summary, error)
	GetSummaryById(context.Context, *GetRequestSummary) (*Summary, error)
	GetAllSummary(context.Context, *GetAllRequestSummary) (*GetAllResponseSummary, error)
	UpdateSummary(context.Context, *Summary) (*Summary, error)
	DeleteSummary(context.Context, *GetRequestSummary) (*StatusSummary, error)
}

// UnimplementedSummaryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSummaryServiceServer struct {
}

func (*UnimplementedSummaryServiceServer) CreateSummary(ctx context.Context, req *Summary) (*Summary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSummary not implemented")
}
func (*UnimplementedSummaryServiceServer) GetSummaryById(ctx context.Context, req *GetRequestSummary) (*Summary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryById not implemented")
}
func (*UnimplementedSummaryServiceServer) GetAllSummary(ctx context.Context, req *GetAllRequestSummary) (*GetAllResponseSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSummary not implemented")
}
func (*UnimplementedSummaryServiceServer) UpdateSummary(ctx context.Context, req *Summary) (*Summary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSummary not implemented")
}
func (*UnimplementedSummaryServiceServer) DeleteSummary(ctx context.Context, req *GetRequestSummary) (*StatusSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSummary not implemented")
}

func RegisterSummaryServiceServer(s *grpc.Server, srv SummaryServiceServer) {
	s.RegisterService(&_SummaryService_serviceDesc, srv)
}

func _SummaryService_CreateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Summary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).CreateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.SummaryService/CreateSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).CreateSummary(ctx, req.(*Summary))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_GetSummaryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestSummary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetSummaryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.SummaryService/GetSummaryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetSummaryById(ctx, req.(*GetRequestSummary))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_GetAllSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequestSummary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetAllSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.SummaryService/GetAllSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetAllSummary(ctx, req.(*GetAllRequestSummary))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_UpdateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Summary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).UpdateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.SummaryService/UpdateSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).UpdateSummary(ctx, req.(*Summary))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_DeleteSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestSummary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).DeleteSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.SummaryService/DeleteSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).DeleteSummary(ctx, req.(*GetRequestSummary))
	}
	return interceptor(ctx, in, info, handler)
}

var _SummaryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.SummaryService",
	HandlerType: (*SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSummary",
			Handler:    _SummaryService_CreateSummary_Handler,
		},
		{
			MethodName: "GetSummaryById",
			Handler:    _SummaryService_GetSummaryById_Handler,
		},
		{
			MethodName: "GetAllSummary",
			Handler:    _SummaryService_GetAllSummary_Handler,
		},
		{
			MethodName: "UpdateSummary",
			Handler:    _SummaryService_UpdateSummary_Handler,
		},
		{
			MethodName: "DeleteSummary",
			Handler:    _SummaryService_DeleteSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "summary/summary.proto",
}

func (m *GetAllRequestSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRequestSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllRequestSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintSummary(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintSummary(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllResponseSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllResponseSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllResponseSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Summary) > 0 {
		for iNdEx := len(m.Summary) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Summary[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSummary(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRequestSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequestSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequestSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintSummary(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Summary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Summary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Summary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Languages) > 0 {
		i -= len(m.Languages)
		copy(dAtA[i:], m.Languages)
		i = encodeVarintSummary(dAtA, i, uint64(len(m.Languages)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Bio) > 0 {
		i -= len(m.Bio)
		copy(dAtA[i:], m.Bio)
		i = encodeVarintSummary(dAtA, i, uint64(len(m.Bio)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Skills) > 0 {
		i -= len(m.Skills)
		copy(dAtA[i:], m.Skills)
		i = encodeVarintSummary(dAtA, i, uint64(len(m.Skills)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintSummary(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSummary(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSummary(dAtA []byte, offset int, v uint64) int {
	offset -= sovSummary(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetAllRequestSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSummary(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovSummary(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllResponseSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Summary) > 0 {
		for _, e := range m.Summary {
			l = e.Size()
			n += 1 + l + sovSummary(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRequestSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSummary(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Summary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSummary(uint64(m.Id))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovSummary(uint64(l))
	}
	l = len(m.Skills)
	if l > 0 {
		n += 1 + l + sovSummary(uint64(l))
	}
	l = len(m.Bio)
	if l > 0 {
		n += 1 + l + sovSummary(uint64(l))
	}
	l = len(m.Languages)
	if l > 0 {
		n += 1 + l + sovSummary(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSummary(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSummary(x uint64) (n int) {
	return sovSummary(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAllRequestSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRequestSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRequestSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSummary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllResponseSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllResponseSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllResponseSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummary
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = append(m.Summary, &Summary{})
			if err := m.Summary[len(m.Summary)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequestSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequestSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequestSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSummary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSummary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Summary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Summary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Summary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSummary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSummary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSummary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSummary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skills = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSummary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSummary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Languages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSummary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSummary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Languages = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSummary(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSummary
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSummary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSummary
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSummary
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSummary
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSummary        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSummary          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSummary = fmt.Errorf("proto: unexpected end of group")
)
